using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using AjaxControlToolkit;

namespace Arquitetura.Web.WebControls
{
    /// <summary>
    /// 
    /// </summary>
    [ToolboxData("<{0}:TUpdateProgress runat=\"server\"></{0}:TUpdateProgress>")]
    [ParseChildren(true)]
    [PersistChildren(true)]
    [Themeable(true)]
    public class TUpdateProgress : Control, IScriptControl
    {
        #region Atributos

        /// <summary>
        /// 
        /// </summary>
        private ScriptManager sMgr;

        #endregion

        #region Propriedades

        /// <summary>
        /// 
        /// </summary>
        [PersistenceMode(PersistenceMode.EncodedInnerDefaultProperty)]
        [Category("Behavior")]
        [DefaultValue(10)]
        public int VerticalOffset
        {
            set { this.ViewState["_!VerticalOffset"] = value; }
            get
            {
                if (this.ViewState["_!VerticalOffset"] == null)
                {
                    this.ViewState["_!VerticalOffset"] = 10;
                }
                return (int)this.ViewState["_!VerticalOffset"];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [PersistenceMode(PersistenceMode.EncodedInnerDefaultProperty)]
        [Category("Behavior")]
        [DefaultValue(10)]
        public int HorizontalOffset
        {
            set { this.ViewState["_!HorizontalOffset"] = value; }
            get
            {
                if (this.ViewState["_!HorizontalOffset"] == null)
                {
                    this.ViewState["_!HorizontalOffset"] = 10;
                }
                return (int)this.ViewState["_!HorizontalOffset"];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [PersistenceMode(PersistenceMode.EncodedInnerDefaultProperty)]
        [Category("Behavior")]
        [DefaultValue(0)]
        public VerticalSide VerticalSide
        {
            set { this.ViewState["_!VerticalSide"] = value; }
            get
            {
                if (this.ViewState["_!VerticalSide"] == null)
                {
                    this.ViewState["_!VerticalSide"] = VerticalSide.Top;
                }
                return (VerticalSide)this.ViewState["_!VerticalSide"];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [PersistenceMode(PersistenceMode.EncodedInnerDefaultProperty)]
        [Category("Behavior")]
        [DefaultValue(0)]
        public HorizontalSide HorizontalSide
        {
            set { this.ViewState["_!HorizontalSide"] = value; }
            get
            {
                if (this.ViewState["_!HorizontalSide"] == null)
                {
                    this.ViewState["_!HorizontalSide"] = HorizontalSide.Left;
                }
                return (HorizontalSide)this.ViewState["_!HorizontalSide"];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [PersistenceMode(PersistenceMode.EncodedInnerDefaultProperty)]
        [Category("Behavior")]
        [DefaultValue(0.1f)]
        public float ScrollEffectDuration
        {
            set { this.ViewState["_!ScrollEffectDuration"] = value; }
            get
            {
                if (this.ViewState["_!ScrollEffectDuration"] == null)
                {
                    this.ViewState["_!ScrollEffectDuration"] = 0.1f;
                }
                return (float)this.ViewState["_!ScrollEffectDuration"];
            }
        }

        #endregion

        #region Metodos

        /// <summary>
        /// Metodo que retorna os descritores de script.
        /// </summary>
        /// <returns></returns>
        public virtual IEnumerable<ScriptDescriptor> GetScriptDescriptors()
        {
            // create instance descriptor
            ScriptControlDescriptor descriptor = new ScriptControlDescriptor("Arquitetura.Web.WebControls.TUpdateProgress", string.Concat(this.ClientID, "_Panel"));

            // return descriptor
            return new ScriptDescriptor[] { descriptor };
        }

        /// <summary>
        /// Metodo que retorna as referencias de script.
        /// </summary>
        /// <returns></returns>
        public virtual IEnumerable<ScriptReference> GetScriptReferences()
        {
            List<ScriptReference> references = new List<ScriptReference>();

            references.Add(new ScriptReference()
            {
                Assembly = "Arquitetura.Web.WC.TUpdateProgress",
                Name = "Arquitetura.Web.WebControls.Resources.TUpdateProgress.js"
            });

            return references.ToArray();
        }

        /// <summary>
        /// Método que cria os controles filhos
        /// </summary>
        protected override void CreateChildControls()
        {
            Panel pnl1 = new Panel();
            pnl1.ID = string.Concat(this.ID, "_Panel");
            pnl1.Attributes.Add("style", "display: none;");

            Panel pnl2 = new Panel();
            pnl2.ID = string.Concat(this.ID, "_Content");
            pnl2.Attributes.Add("style", "border: 1px solid #696969; background-color: #fff; margin: 2px; padding: 2px;");

            LiteralControl lc1 = new LiteralControl("<img src=\"" + this.ResolveUrl("~/app_images/ajax-loader.gif") + "\" style=\"vertical-align: middle; margin-right: 8px;\" alt=\"Processando...\" />");
            LiteralControl lc2 = new LiteralControl("<span style=\"color: red; font-size: 11px; font-weight: bold; letter-spacing:2px;\">Processando...</span>");

            AlwaysVisibleControlExtender avce = new AlwaysVisibleControlExtender();
            avce.ID = string.Concat(this.ID, "_Extender");
            avce.TargetControlID = pnl2.ID;
            avce.VerticalSide = this.VerticalSide;
            avce.VerticalOffset = this.VerticalOffset;
            avce.HorizontalSide = this.HorizontalSide;
            avce.HorizontalOffset = this.HorizontalOffset;
            avce.ScrollEffectDuration = this.ScrollEffectDuration;

            pnl2.Controls.Add(lc1);
            pnl2.Controls.Add(lc2);

            pnl1.Controls.Add(pnl2);
            pnl1.Controls.Add(avce);

            this.Controls.Add(pnl1);
        }

        /// <summary>
        /// Metodo que renderiza o componente.
        /// </summary>
        /// <param name="writer"></param>
        protected override void Render(HtmlTextWriter writer)
        {
            if (!this.DesignMode)
            {
                sMgr.RegisterScriptDescriptors(this);
            }

            base.Render(writer);
        }

        #endregion

        #region Eventos

        /// <summary>
        /// Evento pre-render
        /// </summary>
        /// <param name="e"></param>
        protected override void OnPreRender(EventArgs e)
        {
            if (!this.DesignMode)
            {
                sMgr = ScriptManager.GetCurrent(Page);

                if (sMgr == null)
                {
                    throw new HttpException("A ScriptManager control must exist on the page.");
                }

                sMgr.RegisterScriptControl(this);
            }

            base.OnPreRender(e);
        }

        #endregion
    }
}
