using System;
using System.ComponentModel;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Arquitetura.Web.WebControls
{
    /// <summary>
    /// 
    /// </summary>
    [ParseChildren(true)]
    [PersistChildren(true)]
    [Themeable(true)]
    public sealed class TTextArea : TextBox
    {
        #region Propriedades

        /// <summary>
        /// Propriedade que define o textboxmode do textarea.
        /// </summary>
        [DefaultValue(TextBoxMode.MultiLine)]
        public override TextBoxMode TextMode
        {
            get { return TextBoxMode.MultiLine; }
            set { base.TextMode = value; }
        }

        /// <summary>
        /// Propriedade que define o verticalalign do label
        /// </summary>
        [Category("Behavior")]
        [DefaultValue(VerticalAlign.Bottom)]
        public VerticalAlign LabelCounterVerticalAlign
        {
            get
            {
                if (this.ViewState["_!LabelCounterVerticalAlign"] == null)
                {
                    this.ViewState["_!LabelCounterVerticalAlign"] = VerticalAlign.Bottom;
                }
                return (VerticalAlign)this.ViewState["_!LabelCounterVerticalAlign"];
            }
            set { this.ViewState["_!LabelCounterVerticalAlign"] = value; }
        }

        /// <summary>
        /// Propriedade que define o verticalalign do label
        /// </summary>
        [Category("Behavior")]
        [DefaultValue(HorizontalAlign.Right)]
        public HorizontalAlign LabelCounterHorizontalAlign
        {
            get
            {
                if (this.ViewState["_!LabelCounterHorizontalAlign"] == null)
                {
                    this.ViewState["_!LabelCounterHorizontalAlign"] = HorizontalAlign.Right;
                }
                return (HorizontalAlign)this.ViewState["_!LabelCounterHorizontalAlign"];
            }
            set { this.ViewState["_!LabelCounterHorizontalAlign"] = value; }
        }

        /// <summary>
        /// Propriedade que define o counterposition do label
        /// </summary>
        [DefaultValue(false)]
        [Category("Behavior")]
        public bool ShowLabelCounter
        {
            get
            {
                if (this.ViewState["_!ShowLabelCounter"] == null)
                {
                    this.ViewState["_!ShowLabelCounter"] = false;
                }
                return (bool)this.ViewState["_!ShowLabelCounter"];
            }
            set { this.ViewState["_!ShowLabelCounter"] = value; }
        }

        #endregion

        #region Metodos

        /// <summary>
        /// Evento load
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            if (this.MaxLength > 0)
            {
                // register scripts
                this.Page.ClientScript.RegisterClientScriptResource(this.GetType(), "Arquitetura.Web.WC.TTextArea.Resources.textarea.js");
            }

            base.OnLoad(e);
        }

        /// <summary>
        /// Evento prerender
        /// </summary>
        /// <param name="e"></param>
        protected override void OnPreRender(EventArgs e)
        {
            if (this.MaxLength > 0)
            {
                this.Attributes.Add("onkeypress", "javascript:doKeypress(this);");
                this.Attributes.Add("onbeforepaste", "javascript:doBeforePaste(this);");
                this.Attributes.Add("onpaste", "javascript:doPaste(this);");
                this.Attributes.Add("maxLength", this.MaxLength.ToString());
            }

            base.OnPreRender(e);
        }

        /// <summary>
        /// Evento render
        /// </summary>
        /// <param name="writer"></param>
        protected override void Render(HtmlTextWriter writer)
        {
            base.Render(writer);

            // render label counters
            writer.WriteBeginTag("label");
            writer.WriteAttribute("id", string.Concat(this.ID, "_Label"));
            writer.Write(">");
            writer.WriteEndTag("label");
        }

        #endregion
    }
}
